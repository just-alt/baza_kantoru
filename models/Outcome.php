<?php

namespace app\models;

use Yii;
use yii\data\ActiveDataProvider;
use yii\db\ActiveQuery;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "outcome".
 *
 * @property integer $id
 * @property integer $product_id
 * @property string $price
 * @property integer $count
 * @property string $date
 */
class Outcome extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'outcome';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['product_id', 'count', 'date'], 'required'],
            [['product_id', 'count'], 'integer'],
            ['count', 'compare', 'compareValue' => '0', 'operator' => '>'],
            [['price'], 'number'],
            [['date'], 'safe'],
        ];
    }

    /**
     * Return back product and it's count
     *
     * @return bool
     */
    public function beforeDelete()
    {
        $id = $this->product_id;
        $count = $this->count;
        $this->updateProductCount($id, -$count);
        
        return parent::beforeDelete();
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'product_id' => Yii::t('app', 'Product ID'),
            'price' => Yii::t('app', 'Price'),
            'count' => Yii::t('app', 'Count'),
            'date' => Yii::t('app', 'Date'),
        ];
    }

    public function init()
    {
        if (!$this instanceof OutcomeSearch) {
            $this->price = 0;
            $this->count = 1;
            $this->date = date('Y-m-d');
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Changing
     *
     * @param $id integer product id
     * @param integer $count sold product count
     */
    public function updateProductCount($id, $count)
    {
        Product::findOne($id)->updateCounters(['count' => -$count]);
        $productCount = Product::findOne($id)->count;
        if ($productCount == 0) {
            $product = Product::findOne($id);
            $product->available = 0;
            $product->update();
        } else {
            $product = Product::findOne($id);
            $product->available = 1;
            $product->update();
        }
    }

    /**
     * Gets product price if exists for autofill
     *
     * @param $id integer product id
     *
     * @return float|int
     */
    public static function getProductPrice($id)
    {
        $price_internet = Product::findOne($id)->price_internet;
        if ($price_internet === null) {
            return 0;
        }

        return $price_internet;
    }

    /**
     * Returns ActiveDataProvider with products for Outcome view
     *
     * @param $id
     *
     * @return ActiveDataProvider $this
     */
    public function getProducts($id)
    {
        $query = Product::find()->where(['id' => $id]);
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 10
            ]
        ]);

        return $dataProvider;
    }

    /**
     * Returns ActiveDataProvider with products attributes for Outcome view
     *
     * @param $id integer product id
     *
     * @return ActiveDataProvider $this
     */
    public function getProductAttributes($id)
    {
        $query = Attributes::find()->where(['product_id' => $id]);
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 10
            ]
        ]);

        return $dataProvider;
    }

    /**
     * Generates name for Select2 widget
     *
     * @return array
     */
    public function generateProductField()
    {
        $products = Product::find()->where('count>0')->all();
        $array = ArrayHelper::map($products, 'id', 'name');
        foreach ($array as $id => &$name) {
            $name = "<span><b>{$id}</b>. {$name}</span>";
        }

        return $array;
    }

}
